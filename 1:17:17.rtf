{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Binary 128 64 32 16 8 4 2 1\
\
2SC -128 64 32 16 8 4 2 1 \
\
Turning # to negative\
	invert the switches, then add 1\
\
8-bit\
	-28 -> 28 * (-1)\
	28: 00011100  -> 2SC always has a given # of bits, in this case, 8\
	-> 11100011 + 1 -> 11100100	\
\
11100110 -> negative #\
00011001 + 1 -> 00011010 -> 16 + 8 + 2 = 26 -> -26\
\
  00010101\
+00101101\
  01000010\
\
\
Subtraction general rules\
\
1-1 = 0\
0 - 0 = 0\
1 - 0 =1\
10 - 1 = 1	\
\
\

\b Digital Logic
\b0 \
Digital values for analog Signals\
	implement logical functions: AND, OR, NOT\
	Digital symbols\
		We assign a range of analog values to each digital(logic) symbol\
		Assignment of voltage ranges depends on electrical properties of transistors being used\
\
	0 |\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96\'96| 1\
	0        .5			2.4	5\

\i Truth Table
\i0 \
	basic representations of a logic function\
	perfect induction proof\'97lists the output for all possible input combinations\
	how many rows of the truth table needed? 2^n\
\
	
\i Inverter\
	
\i0 Inverted signals are denoted with an overbar or a prime symbol\
	0 -> 1\
	1 -> 0\
\
	
\i AND Gate
\i0 \
	result of an AND operation is 1 iff all inputs are 1\
	Depicted by the multiplication signal (dot) or by lumping them together AB\
	00 -> 0 \
	01 -> 0\
	10 -> 0\
	11 -> 1\
	can be used to determine if there are carries\
\
	
\i NAND Gate\
	
\i0 Result of NAND operation is 0 iff all inputs are 1\
	depicted by adding a bar to + or a dot to the gate\
	00 -> 1\
	01 -> 1\
	10 -> 1\
	11 -> 0\
\
	
\i OR Gate\
	
\i0 Result of an OR operation is 1 iff any input is 1\
	Depicted by a + symbol eg. A+B\
	00 -> 0\
	01 -> 1\
	10 -> 1\
	11 -> 1\
	\
	
\i NOR Gate\
	
\i0 Result of NOR operation is 1 iff all inputs are 0\
	Depict NOR by the addition symbol with the bar or add a dot to gate\
	00 -> 1\
	01 -> 0\
	10 -> 0\
	11 -> 0\
	\
	
\i XOR Gate\
	
\i0 Result of an Xor operation is 1 iff the inputs differ\
	Depicted by + inside O symbol\
	00 -> 0\
	01 -> 1\
	10 -> 1\
	11 -> 0\
\

\b Truth Table to Gates Procedure
\b0 \
\
1. Read each row of the truth table independently\
2. For each row that is 1, draw an AND gate that is 1 iff the inputs match that line of the truth table\
	(this will require many inverters)\
3. Once all the gates have been created, OR the outputs together\
4. Not always optimal\
\
OR 3-input\
	a + b + c = (a+b) + c\
\
XOR Gate\
a \'96\'96o \
b \'96\'96\'96\
\
Binary Adding Review\
\
0 + 0 = 0\
1 + 0 = 1\
1 + 1  = 2 = 10
\fs22  in binary
\fs24 \
1 + 1 + 1 = 3 = 11 in binary\
\
Can write as a truth table:\
\
Ci = Carry in\
Co = Carry out\
A B Ci  Co S\
00 0 -> 0 0\
00 1 -> 0 1\
01 0 -> 0 1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 01 1 -> 1 0\
10 0 -> 0 0\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 10 1 -> 1 0\
11 0 -> 1 0\
11 1 -> 1 1\
\
Sum\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 00 1 -> 0 1\
01 0 -> 0 1		OR ->\
10 0 -> 0 1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 11 1 -> 1 1\
\
Co\
01 1 -> 1 0\
10 1 -> 1 0\
11 0 -> 1 0		OR ->\
11 1 -> 1 1\
\
Boolean Algebra\
0*0 = 0\
1+1 = 1\
1*1 = 1\
0 + 0 = 0\
01 = 1*0 = 0\
1+0 = 0+1 = 1\
if x = 0 then x\'92 =1\
if x = 1 then x\'92 = 0\
\
x*0 = 0\
x+1 = 1\
x*1 = x\
x + 0 = x\
x*x = x\
x+x =  x\
x*x\'92 = 0\
x+x\'92 = 1\
(x\'92)\'92 = x\
\
Commutative, Associative, Distributive Properties\
x*y = y*x\
x+y = y+x\
x(y*z) = (x*y)*z\
x+(y+z) = (x+y)+z\
x*(y+z) = x*y + x*z\
x+y*z = (x+y)*(x+z)\
\
De Morgan\'92s Laws\
\
\'93Break the line, change the sign\'94\
\
Two Laws\
	A\'92 + B\'92 (AB)\'92\
		NAND Gate\
	A\'92B\'92 = (A+B)\'92\
		NOR Gate\
NAND, NOR, XOR not associative \
\
}